#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_type_func() {
    local flag="${1%%[0-9]*}"
    local type="$1"

    cat <<EOF
// ${type^}List allows setting a value multiple times as in:
// --flag=${flag}1 --flag=${flag}2
$(
    case "$type" in
        *"int")
cat <<EOL
type ${type^}List []${type}64
EOL
            ;;
        *)
cat <<EOL
type ${type^}List []$type
EOL
            ;;
    esac
)

// String will convert ${type^}List to a string.
func (list *${type^}List) String() string {
	if len(*list) == 0 {
		return ""
	}
	return fmt.Sprint(*list)
}

// Set will append a $type to a ${type^}List.
func (list *${type^}List) Set(val string) error {
$(
    case "$type" in
        "float64")
cat <<EOL
    var v $type
    v, _ = strconv.ParseFloat(val, 64)
	(*list) = append(*list, v)
EOL
            ;;
        "int")
cat <<EOL
    var v ${type}64
    v, _ = strconv.ParseInt(val, 0, 0)
	(*list) = append(*list, v)
EOL
            ;;
        "int64")
cat <<EOL
    var v $type
    v, _ = strconv.ParseInt(val, 0, 64)
	(*list) = append(*list, v)
EOL
            ;;
        "string")
cat <<EOL
	(*list) = append(*list, val)
EOL
            ;;
        "uint")
cat <<EOL
    var v ${type}64
    v, _ = strconv.ParseUint(val, 0, 0)
	(*list) = append(*list, v)
EOL
            ;;
        "uint64")
cat <<EOL
    var v $type
    v, _ = strconv.ParseUint(val, 0, 64)
	(*list) = append(*list, v)
EOL
            ;;
    esac
)
	return nil
}
EOF
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package cli

import (
	"fmt"
	"strconv"
)

type columnWidth struct {
	short int
	long  int
	desc  int
	left  int
}

type flagVar struct {
	short   string
	long    string
	desc    string
	thetype string
}

$(
    for type in float64 int int64 string uint uint64; do
        generate_type_func $type
    done; unset type
)
EOF

go fmt "$file"
