#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_type_func() {
    local flag="${1%%[0-9]*}"
    local type="$1"

    cat <<EOF
// ${type^}List allows setting a value multiple times as in:
// --flag=${flag}1 --flag=${flag}2
$(
    case "$type" in
        "float"|*"int")
cat <<EOL
type ${type^}List []${type}64
EOL
            ;;
        *)
cat <<EOL
type ${type^}List []$type
EOL
            ;;
    esac
)

// String will convert ${type^}List to a string.
func (list *${type^}List) String() string {
    if len(*list) == 0 {
        return "[]"
    }
    return fmt.Sprint(*list)
}

// Set will append a $type to a ${type^}List.
func (list *${type^}List) Set(val string) error {
    var e error
$(
    case "$type" in
        "float")
            cat <<EOL
    var v ${type}64
    v, e = strconv.ParseFloat(val, 64)
    (*list) = append(*list, v)
EOL
            ;;
        "int"|"uint")
            cat <<EOL
    var v ${type}64
    v, _ = strconv.Parse${type^}(val, 0, 64)
    (*list) = append(*list, v)
EOL
        ;;
        "string")
            cat <<EOL
    (*list) = append(*list, val)
EOL
            ;;
    esac
)
    if e != nil {
        return errors.Newf("failed to parse %s as $type: %w", val, e)
    }
    return nil
}
EOF
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Create generated.go.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("go")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package cli

import (
    "fmt"
    "strconv"

    "gitlab.com/mjwhitta/errors"
)

$(
    for type in float int string uint; do
        generate_type_func $type
    done; unset type
)
EOF

go fmt "$file" >/dev/null
